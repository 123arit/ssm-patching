- hosts: localhost
  connection: local
  tasks:
  - name: Creating the lambda function
    shell: aws lambda create-function --function-name "{{function_name}}" --runtime "{{runtime}}" --zip-file "fileb://{{zip_file_name_with_ext}}" --handler "{{function_handler}}" --role "{{lambda_role_arn}}" --timeout 300 --region "{{region}}"| jq -r .FunctionArn
    register: var1
  - debug:
      msg: "{{var1}}"
  - name: Create Restful API
    shell: aws apigateway create-rest-api --name "{{function_name}}" --description 'API Gateway to trigger lambda for patching' --region "{{region}}"| jq -r .id
    register: var2
    when: var1.stdout != ""
  - debug:
      msg: "{{var2}}"
  - name: Get Resource ID of the API Gateway
    shell: aws apigateway get-resources --rest-api-id "{{var2.stdout}}" --region "{{region}}"| jq -r .id
    when: var2.stdout != ""
    register: var3
  - debug:
      msg: "{{var3}}"
  - name: API Gateway Put Integration
    shell: aws apigateway put-integration-response --region "{{region}}" --rest-api-id "{{var2.stdout}}" --resource-id "{{var3.stdout}}" --http-method GET --status-code 200 --selection-pattern ""  
    when: var3.stdout != ""
    register: var4
  - debug:
      msg: "{{var4}}"
  - name: API Gateway create deployment to default stage
    shell: aws apigateway put-integration-response --region "{{region}}" --rest-api-id "{{var2.stdout}}" --resource-id "{{var3.stdout}}" --http-method GET --status-code 200 --selection-pattern ""  
    when: var4.stdout != ""
    register: var5
  - debug:
      msg: "{{var5}}"
      
      

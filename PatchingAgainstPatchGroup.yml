- hosts: localhost
  connection: local

  tasks:
  - name: Creating a patch Baseline
    shell: aws ssm create-patch-baseline --name "{{Baseline_Name}}" --operating-system "{{Patch_Operating_System}}" --approval-rules "PatchRules=[{PatchFilterGroup={PatchFilters=[{Key=SEVERITY,Values=["{{Severity}}"]},{Key=CLASSIFICATION,Values=["{{Classification}}"]}]},ApproveAfterDays="{{Approve_after_days}}",EnableNonSecurity=true}]" --description "{{Baseline_description}}" --region "{{region}}"| jq -r .BaselineId
    register: var1
  - debug:
      msg: "{{var1}}"
    
  - name: Register Patch Baseline with Patch Group
    shell: aws ssm register-patch-baseline-for-patch-group --baseline-id "{{var1.stdout}}" --patch-group "{{patch_group}}" --region "{{region}}" 
    register: var2
    when: var1.stdout !=""
  - name: Creating a Maintenance Window
    shell: aws ssm create-maintenance-window --name "{{Maintenance_Window_Name}}" --schedule "{{Maintenance_Schedule}}" --duration "{{Maintenance_Duration}}" --cutoff "{{Maintenance_Cutoff}}" --no-allow-unassociated-targets --region "{{region}}"| jq -r .WindowId
    register: var3
  - debug:
      msg: "{{var3}}"
  - name: Register Patch Group with Maintenance Window
    shell: aws ssm register-target-with-maintenance-window --window-id "{{var3.stdout}}" --targets "Key=tag:Patch Group,Values={{patch_group}}" --owner-information "{{Target_Owner_Information}}" --resource-type "INSTANCE" --region "{{region}}"| jq -r .WindowTargetId
    register: var4
    when: var3.stdout !=""
  
  - name: Register Task with the Maintenance Window
    shell: aws ssm register-task-with-maintenance-window --window-id "{{var3.stdout}}" --targets "Key=WindowTargetIds,Values={{var4.stdout}}" --task-arn "AWS-RunPatchBaseline" --task-type "RUN_COMMAND" --max-concurrency 2 --max-errors 1 --priority 1 --task-invocation-parameters '{"RunCommand":{"Parameters":{"Operation":["{{Task}}"],"RebootOption":["RebootIfNeeded"]},"TimeoutSeconds":600}}' --region "{{region}}"
    when: var4.stdout != ""
